/*
 * The MIT License (MIT)
 *
 * Copyright 2025 Crown Copyright (Health Education England)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package uk.nhs.hee.trainee.details.service;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

import com.openhtmltopdf.pdfboxout.visualtester.PdfVisualTester;
import com.openhtmltopdf.pdfboxout.visualtester.PdfVisualTester.PdfCompareResult;
import io.awspring.cloud.sqs.operations.SqsTemplate;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.ZoneId;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import javax.imageio.ImageIO;
import org.apache.pdfbox.io.IOUtils;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.testcontainers.service.connection.ServiceConnection;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.testcontainers.containers.MongoDBContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.thymeleaf.TemplateSpec;
import org.thymeleaf.templatemode.TemplateMode;
import uk.nhs.hee.trainee.details.DockerImageNames;

@SpringBootTest
@ActiveProfiles("test")
@Testcontainers
class PdfGeneratingServiceIntegrationTest {

  // Not ideal having a hardcoded path, but we want to be able to upload the results.
  private static final String TEST_OUTPUT_PATH = "build/reports/pdf-regression";

  // Mongo is not actually used, but the text context is too inclusive.
  @Container
  @ServiceConnection
  private static final MongoDBContainer mongoContainer = new MongoDBContainer(
      DockerImageNames.MONGO);

  @MockBean
  private SqsTemplate sqsTemplate;

  @Autowired
  private PdfGeneratingService service;

  @Value("${application.timezone}")
  private ZoneId zoneId;

//  @Value("#{${application.template-versions}}")
//  private Map<String, String> templateVersions;

  @Test
  void shouldMatchEmptyPdfWhenDtoEmpty() throws IOException {
    // Generate PDF with template
    String templatePath =
        "layout\\letter" + File.separatorChar + "v1.0.0" + ".html";
    TemplateSpec templateSpec = new TemplateSpec(
        templatePath, Set.of(), TemplateMode.HTML, null);

    byte[] generatedBytes = service.generatePdf(templateSpec, Map.of());

    int problems = compareGeneratedPdf("programme-confirmation-empty", generatedBytes);
    assertThat("Unexpected PDF comparison problem count.", problems, is(0));
  }

  @Test
  void shouldMatchFullPdfWhenDtoPopulated() throws IOException {
    String templatePath =
        "layout\\letter" + File.separatorChar + "v1.0.0" + ".html";
    TemplateSpec templateSpec = new TemplateSpec(
        templatePath, Set.of(), TemplateMode.HTML, null);

    byte[] generatedBytes = service.generatePdf(templateSpec, Map.of());

    int problems = compareGeneratedPdf("programme-confirmation", generatedBytes);
    assertThat("Unexpected PDF comparison problem count.", problems, is(0));
  }

  /**
   * Compare the bytes of a generated PDF against an existing example.
   *
   * @param resource          The filename of the existing PDF to check against, without extension.
   * @param generatedPdfBytes The generated bytes.
   * @return The number of discrepancies between the generation and expected results.
   * @throws IOException If output files could not be created, or reading the bytes fails.
   */
  private int compareGeneratedPdf(String resource, byte[] generatedPdfBytes) throws IOException {
    Files.createDirectories(Paths.get(TEST_OUTPUT_PATH));

    byte[] expectedPdfBytes;

    try (InputStream expectedIs = getClass().getResourceAsStream("/pdf/" + resource + ".pdf")) {
      assert expectedIs != null;
      expectedPdfBytes = IOUtils.toByteArray(expectedIs);
    }

    // Get a list of results.
    List<PdfCompareResult> problems = PdfVisualTester.comparePdfDocuments(expectedPdfBytes,
        generatedPdfBytes, resource, false);

    if (!problems.isEmpty()) {
      System.err.println("Found problems with test case (" + resource + "):");
      System.err.println(problems.stream()
          .map(p -> p.logMessage)
          .collect(Collectors.joining("\n    ", "[\n    ", "\n]")));

      System.err.println("For test case (" + resource + ") writing failure artefacts to '"
          + TEST_OUTPUT_PATH + "'");
      File generatedPdf = new File(TEST_OUTPUT_PATH, resource + "---actual.pdf");
      Files.write(generatedPdf.toPath(), generatedPdfBytes);
    }

    for (PdfCompareResult result : problems) {
      if (result.testImages != null) {
        File output = new File(TEST_OUTPUT_PATH,
            resource + "---" + result.pageNumber + "---diff.png");
        ImageIO.write(result.testImages.createDiff(), "png", output);

        output = new File(TEST_OUTPUT_PATH, resource + "---" + result.pageNumber + "---actual.png");
        ImageIO.write(result.testImages.getActual(), "png", output);

        output = new File(TEST_OUTPUT_PATH,
            resource + "---" + result.pageNumber + "---expected.png");
        ImageIO.write(result.testImages.getExpected(), "png", output);
      }
    }

    return problems.size();
  }
}
