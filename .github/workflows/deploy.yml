name: Deploy

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload build artifact
        uses: actions/upload-artifact@v2-preview
        with:
          name: app-jar
          path: build/libs/*.jar

  dockerize:
    name: Dockerize
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@v2-preview
        with:
          name: app-jar
          path: build/libs

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image-uri::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Write image uri
        run: echo ${{ steps.build-image.outputs.image-uri }} > image-uri.txt

      - name: Upload image uri
        uses: actions/upload-artifact@v1
        with:
          name: image-uri
          path: image-uri.txt

  deploy:
    name: Deploy
    needs: dockerize
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download image uri
        uses: actions/download-artifact@v1
        with:
          name: image-uri
          path: image-uri.txt

      - name: Read image uri
        id: read-image-uri
        run:
          image-uri = `cat image-uri.txt`
          echo "::set-output name=image-uri::$image-uri"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ github.event.repository.name }}
          image: ${{ steps.read-image-uri.outputs.image-uri }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ github.event.repository.name }}
          cluster: ${{ github.event.repository.name }}
          wait-for-service-stability: true
